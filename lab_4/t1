class Rational:

    #  конструктор класса
    def __init__(self, num1=1, num2=1):
        if not isinstance(num1 or num2, (float, int)):
            raise TypeError('Error: value is incorrect')

        if num1 <= 0 or num2 <= 0:
            raise ValueError('Error: first value or second value is negative or zero.')

        self.__num1 = num1
        self.__num2 = num2

    @property
    def num_1(self):
        return self.__num1

    @property
    def num_2(self):
        return self.__num2

    @num_1.setter
    def num_1(self, value):
        if not isinstance(value, (int, float)):
            raise TypeError('Error: value is incorrect')
        self.__num1 = value

    @num_2.setter
    def num_2(self, value):
        if not isinstance(value, (int, float)):
            raise TypeError('Error: value is incorrect')
        self.__num2 = value

    def gcd(self):
        a = self.__num1
        b = self.__num2

        while a != 0 and b != 0:
            if a > b:
                a = a % b
            else:
                b = b % a
        return max(a, b)

    # output constructor
    def __str__(self):
        return '{}/{}'.format(self.__num1, self.__num2)

    #  +
    def __add__(self, other):
        return Rational(self.__num1 + other.__num1, self.__num2 + other.__num2)

    # *
    def __mul__(self, other):
        return Rational(self.__num1 * other.__num1, self.__num2 * other.__num2)

    # -
    def __sub__(self, other):
        return Rational(self.__num1 - other.__num1, self.__num2 - other.__num2)

    # /
    def __truediv__(self, other):
        return Rational(self.__num1 / other.__num1, self.__num2 / other.__num2)

    # дробная часть, сокращённая форма.
    def fraction(self):
        a = self.__num1
        b = self.__num2

        c = self.gcd()
        a = a // c
        b = b // c

        return 'Simplified fraction is {0}/{1}'.format(a, b)

    #  дробная часть в формате плавающей точкой
    def fraction_in_decimal(self, divider=1):
        a = self.__num1
        b = self.__num2

        a = a / divider
        b = b / divider
        return str(a / b)


def calculate(*args):
    try:
        return eval(''.join(map(str, args)))
    except TypeError:
        return None


def main():
    q = False
    while not q:
        inp1 = float(input("obj1, x -> "))
        inp2 = float(input("obj1, y -> "))
        inp3 = float(input("obj2, x -> "))
        inp4 = float(input("obj2, y -> "))
        ope = input("Give us a sign?")

        obj1 = Rational(inp1, inp2)
        obj2 = Rational(inp3, inp4)

        #  count result = inp1/inp2 + inp3/inp4
        #
        print(calculate(obj1, ope, obj2))
        x = input('Press <Enter> to try again or write anything to exit...')
        if len(x) < 1:
            continue
        else:
            break


if __name__ == '__main__':
    main()
